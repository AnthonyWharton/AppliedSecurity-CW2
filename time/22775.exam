Q.1 The vendor of the attack target is concerned that news of this attack
    could scare off potential customers; they will make any alteration
    necessary (in software or hardware) to prevent the attack.  Explain the
    options they have, and which one you would recommend.

A.1 TODO

================================================================================

Q.2 The vendor of the attack target is concerned that a similar attack may
    also apply to their implementation of ElGamal encryption.  Explain the
    potential for such an attack, and how it differs wrt.  the case of RSA.

A.2 TODO

================================================================================

Q.3 Your implementation of this attack will use some form of statistical
    test.  Explain what test you have used, how it works, and also how it
    compares with at least one alternative.

A.3 TODO

================================================================================

Q.8 Imagine you read a research paper that suggests a larger key (e.g.,
    2048-bit rather than 1024-bit) could help to prevent this attack.
    Explain whether and why you think this is right (or wrong).

A.8 I would describe this to be categorically wrong.  Increased key size will
    not prevent attack, just increase the amount of time taken for the attack to
    be carried out.  This is due to the fact that on any reasonably modern bit
    of hardware, with a reasonably optimised implementation, the runtime of the
    attack would not slow that drastically, even at these larger key sizes.

    At every iteration of the attack can run in roughly "constant" time.  By
    that I mean, no computation should need to be done that is linked to the key
    size.  In my implementation, if an error occurs the data has to be
    regenerated, which would take longer at larger key sizes.  But this is purely
    down to the implementation complexity/time spent to reward ratio (laziness),
    and not infeasible, a fully dynamic programming approach would be possible
    here that would solve this with acceptable memory usage.